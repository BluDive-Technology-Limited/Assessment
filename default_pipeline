pipeline {
    agent any

    parameters {
        string(name: 'GIT_URL', defaultValue: '', description: 'Git repo URL of the project')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        PROJECT_NAME = "${params.GIT_URL.split('/')[-1].replace('.git', '').toLowerCase()}"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: "${params.GIT_URL}", branch: "${params.GIT_BRANCH}", credentialsId: 'github-credentials'
            }
        }

        stage('Set Commit ID and Image Tag') {
            steps {
                script {
                    env.COMMIT_ID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.IMAGE_TAG = "${env.BUILD_NUMBER}-${env.COMMIT_ID}"
                    echo "Commit ID: ${env.COMMIT_ID}"
                    echo "Image Tag: ${env.IMAGE_TAG}"
                }
            }
        }

        stage('Docker Build') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-jenkins', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh """
                        docker build -t ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Security Scan (Trivy)') {
            steps {
                script {
                    def image = "${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${BUILD_NUMBER}-${COMMIT_ID}"
                    sh """
                        echo "[+] Running Trivy scan on image: ${image}"
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity CRITICAL --exit-code 1 --format table ${image} > trivy_report.txt
                    """
                    archiveArtifacts artifacts: 'trivy_report.txt'
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-jenkins', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh """
                        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
                        docker push ${DOCKERHUB_USERNAME}/${PROJECT_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }
    }
}
