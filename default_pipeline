pipeline {
    agent any
    stages {
        stage('Create context_env') {
            steps {
                sh '''
                    echo "GIT_URL=https://github.com/BluDive-Technology-Limited/Assessment.git" > context_env
                    echo "GIT_BRANCH=origin/main" >> context_env
                '''
            }
        }
        stage('Get Envs') {
            steps {
                script {
                    def lines = readFile("${env.WORKSPACE}/context_env").split("\n")
                    lines.each { envLine ->
                        def (key, value) = envLine.tokenize("=")
                        env."${key}" = "${value}"
                    }

                    env.PROJECT_NAME = env.GIT_URL.split("/")[4].replace(".git", "").trim().toLowerCase()
                    env.PROJECT_BRANCH = env.GIT_BRANCH.split("/")[1].trim()

                    echo "PROJECT_NAME=${env.PROJECT_NAME}"
                    echo "PROJECT_BRANCH=${env.PROJECT_BRANCH}"
                }
            }
        }

        stage('Checkout') {
            steps {
                git url: "${env.GIT_URL}", credentialsId: 'github-credentials', branch: "${env.PROJECT_BRANCH}"
            }
        }

        stage('Docker Build') {
            steps {
                sh """
                    docker build -t ${PROJECT_NAME}:${BUILD_NUMBER} .
                    docker tag ${PROJECT_NAME}:${BUILD_NUMBER} ${PROJECT_NAME}:latest
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh """
                    sed -i 's|image: .*|image: ${PROJECT_NAME}:${BUILD_NUMBER}|' k8s/deployment.yaml
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml
                """
            }
        }

        stage('Verify Deployment') {
            steps {
                sh "kubectl rollout status deployment/${PROJECT_NAME} --timeout=60s"
            }
        }
    }
}
